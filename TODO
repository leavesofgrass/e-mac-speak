
* Bugs
- Sometimes the voicification goes crazy and the pitch gets all out of wack.  Resetting with c-e c-s appears to fix it.
- Lines beginning with a cemicolon, probably other punct as well, introduce a pause before the line is spoken.  The result is to introduce latency when arrowing from line to line.
- Decide which punctuation characters to include in none, some, and all levels.
- Upper case pitch adjustment needs to reset pitch for subsequent lower
case letters. Perhaps the server needs to keep some state (i.e. current pitch).
- It appears that in punctuation mode none that all punct is stripped out and thus results in strange word pronunciation e.g. i'll becomes ill and numbers with decimal points run together.  Not sure about the correct fix for this ATM.
- The following sequence crashes the server.  it appears that line 540
      effectName = effectArgs.pop(0)
Is the culpritâ€“ at the time there are two echo commands in the queue and somehow it is popping the effect name off the second one such that when we go to process it the effect name is '1'.
q { [[pbas 55]]  [[pmod 98.7]]  [{echo 1 1 60 0.3}]   [[pbas 10]]  [[pmod 84.6]]  [{echo 1 1 60 0.3}] jrollins@finestructure.net  [{voice alex}] }
d
- Turning niumbers into words ignores leading 0s.  Thus something like 0123456 gives no indication of the leading 0.



* Missing features
- all caps mode
- split caps mode

* fixed issues
- No pitch change for capital letters
- the dollar sign is silent.
- The following output from emacspeak causes issues.
When you send this text to the server it says nothing until you issue
   an additional d command:
---- begin ---
q {   [[rate 350]] 
 }
q {
 }
q { [[rate 350]] agility-mawson-lakes:~    [[rate 350]]  
 }
q {   [[rate 350]] 
 }
q { [[rate 350]]  pound      [[rate 350]]  
 }
d
---- end ---
Resolution: The first queue block "q {" is empty. We're therefore queuing
a string containing "{".  We explicitly check for this now.

- The lowercase letter  b is pronounced very strangely although the capital B is ok.  Remember some special caseing in the server which is probably already trying to deal with this.  Need to isolate when this happens, seams to be when arrowing over the letter or when typing, not when it is read as a single word in a sentence.
-Added more symbols to expand into human "readable" text "-, (, )".
- Should just use a regex to extract out the command and args; would make
 the individual protocol commands much more readable.
(i.e. "^([a-z]*) {(\S\s*)
Then, each protocol command could do its own argument parsing.
resolution:  added new class ProtocolHandler.
- Fixed another "chunk loss" issue.  The issue had been that sometimes, we don't call processSpeechQueue when there are more items to be processed and idspatch had been called.  This is because we rely upon didFinishSpeaking from NSSpeechSynthesizer to be called; however, we don't always send items on the speech queue to the speech synth.
- audio icons.  Note you need to set the following in your .emacs:
(setq emacspeak-auditory-icon-function 'emacspeak-queue-auditory-icon)
- Rate is not always reset correctly.  To reproduce one way is to arrow up and down quickly in a dired listing, especially if the dir or file name is long.  It appears that if speech is interupted it then slows down.
 resolution: implement tts_sync_state and set speech rate before speech synthesis starts. 
- Punctuation modes do not change 
resolution: Implemented punctuation levels.  We will still need to tune exactly what is included in each level.

* Nice to have:
-  rewrite the main parser of the raw TTS messages from emacspeak.
Substitute the regex strategy with the below state machine.  This has the advantage of being closely aligned with how the commands are structured.  It also will allow us to perform punctuation to word expansions in the same pass through the raw content instead of doing it again  later on.

set state = looking for command
for each input character c:
switch state:
case state looking for command:
c in [a-z_]: append c to currentCommand
c is a new line: set state to terminal (argless command).
c is a space and we have a handler for currentCommand: set state to
generalCommand.

case state generalCommand:
c == {: set state to blockCommand
c == " ", set state to spaceCommand.

case state blockCommand:
if c is "}", stop and set to terminal (block dispatch).
otherwise, blockArgs.append(c).

case in state spacecommand:
c == new line, set state to terminal (space delimited).
c == " ", add currentArg to spaceArgs
otherwise, currentArgs.append(c)

case state terminal:
block: handler(blockId, blockArgs)
spaceDelimited: handler(spaceId, spaceArgs)
argless: handler(id)
set state to looking for command
- Tones are now implemented.
- dtk-capitalize now works, toggle with c-e d c
- When large chunks of text are sent to the server it becomes unresponsive.  For example if you do a "svn log" in the shell for this project, things lock up for some time.
- Sometimes chunks of text are lost.  Haven't been able to create a reproduceable case yet.
- issueing the emacspeak-speak-time command (bound to c-e t) quickly results in the year spoken again and again.  expected behaviour is that the currently speaking time is interupdated and speaking starts from the time again.  You need to hit this combo rather quickly again and again to see this.  Suspect this is exposing an underlieing  issue of some sort.
